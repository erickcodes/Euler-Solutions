#include <iostream>
#include <vector>
#include <windows.h>
#include <string>
#include <stdlib.h>
#include <fstream>

#define datatype int

using namespace std;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

void Answer(const string &s)
{
    HWND hwnd = GetDesktopWindow();
	OpenClipboard(hwnd);
	EmptyClipboard();
	HGLOBAL hg=GlobalAlloc(GMEM_MOVEABLE,s.size()+1);
	if (!hg){
		CloseClipboard();
		return;
	}
	memcpy(GlobalLock(hg),s.c_str(),s.size()+1);
	GlobalUnlock(hg);
	SetClipboardData(CF_TEXT,hg);
	CloseClipboard();
	GlobalFree(hg);
	cout << s << endl;
}

vector<datatype> dataVector()
{
    ifstream myfile ("data.txt");
    vector<datatype> data;
    if (myfile.is_open())
    {
    //Process data.txt
     myfile.close();
    }
    else cout << "Unable to open file";
    return data;
}
int tick = -1;
int divisions(long long x)
{
    int counter = 0;
    long long last=  1;
    for( long long i = 1; i < x/last; i++)
    {
       if(x%i == 0)
        {
            last = i;
            counter++;
            counter++;
        }

        if(counter > tick){tick++;cout <<  counter << endl;}

        if(counter == 500) {cout <<  "Answer: " << endl;return 500;}

    }
    return counter;
}
int main()
{
    vector<datatype> data = dataVector();
    //Code here!
    long long total = 0;
    long long i = 0;
    do
    {
        total +=i++;
        //if(total >200){cout<< total << endl;}
    }while(divisions(total) < 499);
    char buffer [40];
    itoa (total,buffer,10);
    Answer(buffer);
    return 0;
}
